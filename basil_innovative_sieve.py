#!/usr/bin/env python3
"""
ุบุฑุจุงู ุจุงุณู ุงููุจุชูุฑ ููุฃุนุฏุงุฏ ุงูุฃูููุฉ
Basil's Innovative Prime Sieve

ุฎูุงุฑุฒููุฉ ูุจุชูุฑุฉ ุชุณุชุฎุฏู ูุตูููุฉ ุซูุงุฆูุฉ ุงูุฃุจุนุงุฏ
ูุฅูุฌุงุฏ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุจููุงุกุฉ ุนุงููุฉ

ุฃุณุชุงุฐ ุจุงุณู ูุญูู ุนุจุฏุงููู - ุงููุจุชูุฑ ุงูุนููู
"""

import numpy as np
import matplotlib.pyplot as plt
import time
from typing import List, Set, Tuple
import math

class BasilInnovativeSieve:
    """
    ุบุฑุจุงู ุจุงุณู ุงููุจุชูุฑ ููุฃุนุฏุงุฏ ุงูุฃูููุฉ
    ูุณุชุฎุฏู ูุตูููุฉ ุซูุงุฆูุฉ ุงูุฃุจุนุงุฏ ูุญุณุงุจ ุงููุถุงุนูุงุช
    """
    
    def __init__(self, max_number: int):
        """
        ุชููุฆุฉ ุงูุบุฑุจุงู
        Args:
            max_number: ุฃูุจุฑ ุนุฏุฏ ููุจุญุซ ุนู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุญุชู ูุฐุง ุงูุญุฏ
        """
        self.max_number = max_number
        self.primes = []
        self.execution_time = 0
        self.memory_usage = 0
        
    def generate_primes(self) -> List[int]:
        """
        ุชูููุฏ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุจุงุณุชุฎุฏุงู ุบุฑุจุงู ุจุงุณู ุงููุจุชูุฑ
        Returns:
            ูุงุฆูุฉ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ
        """
        start_time = time.time()
        
        print(f"๐ ุจุฏุก ุบุฑุจุงู ุจุงุณู ุงููุจุชูุฑ ููุฃุนุฏุงุฏ ุญุชู {self.max_number}")
        print("=" * 60)
        
        # ุงูุฎุทูุฉ ุงูุฃููู: ุฅูุดุงุก ูุงุฆูุฉ ุงูุฃุนุฏุงุฏ ุงููุฑุฏูุฉ ููุท
        print("๐ ุงูุฎุทูุฉ 1: ุฅูุดุงุก ูุงุฆูุฉ ุงูุฃุนุฏุงุฏ ุงููุฑุฏูุฉ...")
        odd_numbers = [n for n in range(3, self.max_number + 1, 2)]
        print(f"โ ุชู ุฅูุดุงุก {len(odd_numbers)} ุนุฏุฏ ูุฑุฏู")
        
        # ุฅุถุงูุฉ ุงูุนุฏุฏ 2 (ุงููุญูุฏ ุงูุฒูุฌู ุงูุฃููู)
        self.primes = [2]
        
        # ุงูุฎุทูุฉ ุงูุซุงููุฉ: ุฅูุดุงุก ุงููุญุงูุฑ x ู y
        print("๐ ุงูุฎุทูุฉ 2: ุฅูุดุงุก ุงููุญุงูุฑ...")
        max_factor = int(math.sqrt(self.max_number)) + 1
        x_axis = [n for n in range(3, max_factor + 1, 2)]
        y_axis = [n for n in range(3, max_factor + 1, 2)]
        
        print(f"โ ุงููุญูุฑ ุงูุณููู: {len(x_axis)} ุนูุตุฑ")
        print(f"โ ุงููุญูุฑ ุงูุตุงุฏู: {len(y_axis)} ุนูุตุฑ")
        
        # ุงูุฎุทูุฉ ุงูุซุงูุซุฉ: ุญุณุงุจ ุงููุถุงุนูุงุช ูู ุงููุตูููุฉ
        print("๐ ุงูุฎุทูุฉ 3: ุญุณุงุจ ุงููุถุงุนูุงุช...")
        composites = set()
        
        for x in x_axis:
            for y in y_axis:
                product = x * y
                if product <= self.max_number:
                    composites.add(product)
        
        print(f"โ ุชู ุญุณุงุจ {len(composites)} ูุถุงุนู")
        
        # ุงูุฎุทูุฉ ุงูุฑุงุจุนุฉ: ุญุฐู ุงููุถุงุนูุงุช ูู ุงููุงุฆูุฉ ุงูุฃุตููุฉ
        print("๐ ุงูุฎุทูุฉ 4: ุชูููุฉ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ...")
        
        # ุฅุถุงูุฉ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงูุตุบูุฑุฉ ุงูุชู ูุฏ ุชููู ููููุฏุฉ
        for num in odd_numbers:
            if num not in composites:
                self.primes.append(num)
        
        # ุชุฑุชูุจ ุงููุงุฆูุฉ
        self.primes.sort()
        
        self.execution_time = time.time() - start_time
        
        print(f"โ ุชู ุงูุนุซูุฑ ุนูู {len(self.primes)} ุนุฏุฏ ุฃููู")
        print(f"โฑ๏ธ ููุช ุงูุชูููุฐ: {self.execution_time:.4f} ุซุงููุฉ")
        
        return self.primes
    
    def generate_primes_optimized(self) -> List[int]:
        """
        ูุณุฎุฉ ูุญุณูุฉ ูู ุงูุบุฑุจุงู ูุน ุชุญุณููุงุช ุฅุถุงููุฉ
        """
        start_time = time.time()
        
        print(f"๐ ุบุฑุจุงู ุจุงุณู ุงููุญุณู ููุฃุนุฏุงุฏ ุญุชู {self.max_number}")
        print("=" * 60)
        
        # ุจุฏุก ุจุงูุนุฏุฏ 2
        if self.max_number >= 2:
            self.primes = [2]
        else:
            self.primes = []
            return self.primes
        
        # ุฅูุดุงุก ูุตูููุฉ ููุทููุฉ ููุฃุนุฏุงุฏ ุงููุฑุฏูุฉ
        max_odd_index = (self.max_number - 1) // 2
        is_prime = [True] * (max_odd_index + 1)
        
        # ุฏุงูุฉ ูุชุญููู ุงูุนุฏุฏ ุงููุฑุฏู ุฅูู ููุฑุณ
        def odd_to_index(n):
            return (n - 3) // 2
        
        # ุฏุงูุฉ ูุชุญููู ุงูููุฑุณ ุฅูู ุนุฏุฏ ูุฑุฏู
        def index_to_odd(i):
            return 2 * i + 3
        
        # ุชุทุจูู ุงูุบุฑุจุงู
        limit = int(math.sqrt(self.max_number))
        
        for i in range(len(is_prime)):
            if is_prime[i]:
                prime = index_to_odd(i)
                if prime > limit:
                    break
                
                # ุชุนููู ุฌููุน ูุถุงุนูุงุช ูุฐุง ุงูุนุฏุฏ ุงูุฃููู
                for j in range(i + prime, len(is_prime), prime):
                    is_prime[j] = False
        
        # ุฌูุน ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ
        for i in range(len(is_prime)):
            if is_prime[i]:
                self.primes.append(index_to_odd(i))
        
        self.execution_time = time.time() - start_time
        
        print(f"โ ุชู ุงูุนุซูุฑ ุนูู {len(self.primes)} ุนุฏุฏ ุฃููู")
        print(f"โฑ๏ธ ููุช ุงูุชูููุฐ: {self.execution_time:.4f} ุซุงููุฉ")
        
        return self.primes
    
    def compare_with_traditional_sieve(self) -> dict:
        """
        ููุงุฑูุฉ ูุน ุบุฑุจุงู ุฅุฑุงุชูุณุชููุณ ุงูุชูููุฏู
        """
        print("\n๐ ููุงุฑูุฉ ูุน ุบุฑุจุงู ุฅุฑุงุชูุณุชููุณ ุงูุชูููุฏู")
        print("=" * 50)
        
        # ุบุฑุจุงู ุฅุฑุงุชูุณุชููุณ ุงูุชูููุฏู
        start_time = time.time()
        traditional_primes = self._sieve_of_eratosthenes()
        traditional_time = time.time() - start_time
        
        # ุบุฑุจุงู ุจุงุณู
        start_time = time.time()
        basil_primes = self.generate_primes_optimized()
        basil_time = time.time() - start_time
        
        # ุงูููุงุฑูุฉ
        results = {
            'traditional': {
                'primes': traditional_primes,
                'count': len(traditional_primes),
                'time': traditional_time
            },
            'basil': {
                'primes': basil_primes,
                'count': len(basil_primes),
                'time': basil_time
            },
            'speedup': traditional_time / basil_time if basil_time > 0 else float('inf'),
            'accuracy': len(set(traditional_primes) & set(basil_primes)) / len(traditional_primes) * 100
        }
        
        print(f"๐ ุบุฑุจุงู ุฅุฑุงุชูุณุชููุณ: {results['traditional']['count']} ุนุฏุฏ ูู {traditional_time:.4f}s")
        print(f"๐ ุบุฑุจุงู ุจุงุณู: {results['basil']['count']} ุนุฏุฏ ูู {basil_time:.4f}s")
        print(f"๐ ุชุณุฑูุน: {results['speedup']:.2f}x")
        print(f"๐ฏ ุฏูุฉ: {results['accuracy']:.2f}%")
        
        return results
    
    def _sieve_of_eratosthenes(self) -> List[int]:
        """
        ุชูููุฐ ุบุฑุจุงู ุฅุฑุงุชูุณุชููุณ ุงูุชูููุฏู ููููุงุฑูุฉ
        """
        if self.max_number < 2:
            return []
        
        is_prime = [True] * (self.max_number + 1)
        is_prime[0] = is_prime[1] = False
        
        for i in range(2, int(math.sqrt(self.max_number)) + 1):
            if is_prime[i]:
                for j in range(i * i, self.max_number + 1, i):
                    is_prime[j] = False
        
        return [i for i in range(2, self.max_number + 1) if is_prime[i]]
    
    def visualize_sieve_matrix(self, max_display: int = 20):
        """
        ุฑุณู ูุตูููุฉ ุงูุบุฑุจุงู ููุชูุถูุญ
        """
        print(f"\n๐จ ุฑุณู ูุตูููุฉ ุงูุบุฑุจุงู (ุญุชู {max_display})")
        print("=" * 40)
        
        # ุฅูุดุงุก ุงููุญุงูุฑ ููุนุฑุถ
        x_axis = [n for n in range(3, max_display + 1, 2)]
        y_axis = [n for n in range(3, max_display + 1, 2)]
        
        # ุฅูุดุงุก ุงููุตูููุฉ
        matrix = np.zeros((len(y_axis), len(x_axis)))
        
        for i, y in enumerate(y_axis):
            for j, x in enumerate(x_axis):
                matrix[i, j] = x * y
        
        # ุฑุณู ุงููุตูููุฉ
        fig, ax = plt.subplots(figsize=(12, 10))
        im = ax.imshow(matrix, cmap='viridis', aspect='auto')
        
        # ุฅุถุงูุฉ ุงูููู ุฅูู ุงููุตูููุฉ
        for i in range(len(y_axis)):
            for j in range(len(x_axis)):
                text = ax.text(j, i, f'{int(matrix[i, j])}',
                             ha="center", va="center", color="white", fontsize=8)
        
        # ุชุณููุงุช ุงููุญุงูุฑ
        ax.set_xticks(range(len(x_axis)))
        ax.set_yticks(range(len(y_axis)))
        ax.set_xticklabels(x_axis)
        ax.set_yticklabels(y_axis)
        ax.set_xlabel('ุงููุญูุฑ ุงูุณููู (x)')
        ax.set_ylabel('ุงููุญูุฑ ุงูุตุงุฏู (y)')
        ax.set_title('ูุตูููุฉ ุบุฑุจุงู ุจุงุณู ุงููุจุชูุฑ\n(ุงููุถุงุนูุงุช ุงููุญุณูุจุฉ)')
        
        # ุดุฑูุท ุงูุฃููุงู
        plt.colorbar(im, ax=ax, label='ูููุฉ ุงููุถุงุนู')
        plt.tight_layout()
        plt.savefig('basil_sieve_matrix.png', dpi=300, bbox_inches='tight')
        print("โ ุชู ุญูุธ ุงูุฑุณู: basil_sieve_matrix.png")
        
        return fig
    
    def analyze_efficiency(self, test_ranges: List[int]) -> dict:
        """
        ุชุญููู ููุงุกุฉ ุงูุบุฑุจุงู ุนูู ูุทุงูุงุช ูุฎุชููุฉ
        """
        print("\n๐ ุชุญููู ููุงุกุฉ ุงูุบุฑุจุงู")
        print("=" * 40)
        
        results = {
            'ranges': test_ranges,
            'basil_times': [],
            'traditional_times': [],
            'basil_counts': [],
            'traditional_counts': [],
            'speedups': []
        }
        
        for max_num in test_ranges:
            print(f"\n๐ฏ ุงุฎุชุจุงุฑ ุงููุทุงู: ุญุชู {max_num}")
            
            # ุงุฎุชุจุงุฑ ุบุฑุจุงู ุจุงุณู
            sieve = BasilInnovativeSieve(max_num)
            start_time = time.time()
            basil_primes = sieve.generate_primes_optimized()
            basil_time = time.time() - start_time
            
            # ุงุฎุชุจุงุฑ ุบุฑุจุงู ุฅุฑุงุชูุณุชููุณ
            start_time = time.time()
            traditional_primes = sieve._sieve_of_eratosthenes()
            traditional_time = time.time() - start_time
            
            speedup = traditional_time / basil_time if basil_time > 0 else float('inf')
            
            results['basil_times'].append(basil_time)
            results['traditional_times'].append(traditional_time)
            results['basil_counts'].append(len(basil_primes))
            results['traditional_counts'].append(len(traditional_primes))
            results['speedups'].append(speedup)
            
            print(f"  ๐ ุจุงุณู: {len(basil_primes)} ุนุฏุฏ ูู {basil_time:.4f}s")
            print(f"  ๐ ุชูููุฏู: {len(traditional_primes)} ุนุฏุฏ ูู {traditional_time:.4f}s")
            print(f"  ๐ ุชุณุฑูุน: {speedup:.2f}x")
        
        return results
    
    def plot_efficiency_analysis(self, results: dict):
        """
        ุฑุณู ุชุญููู ุงูููุงุกุฉ
        """
        fig, axes = plt.subplots(2, 2, figsize=(14, 10))
        
        ranges = results['ranges']
        
        # ุฑุณู ุฃููุงุช ุงูุชูููุฐ
        axes[0, 0].plot(ranges, results['basil_times'], 'b-o', label='ุบุฑุจุงู ุจุงุณู', linewidth=2)
        axes[0, 0].plot(ranges, results['traditional_times'], 'r-s', label='ุบุฑุจุงู ุฅุฑุงุชูุณุชููุณ', linewidth=2)
        axes[0, 0].set_xlabel('ุงููุทุงู ุงูุฃูุตู')
        axes[0, 0].set_ylabel('ููุช ุงูุชูููุฐ (ุซุงููุฉ)')
        axes[0, 0].set_title('ููุงุฑูุฉ ุฃููุงุช ุงูุชูููุฐ')
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)
        axes[0, 0].set_yscale('log')
        
        # ุฑุณู ุงูุชุณุฑูุน
        axes[0, 1].plot(ranges, results['speedups'], 'g-^', linewidth=2, markersize=8)
        axes[0, 1].set_xlabel('ุงููุทุงู ุงูุฃูุตู')
        axes[0, 1].set_ylabel('ูุนุงูู ุงูุชุณุฑูุน')
        axes[0, 1].set_title('ูุนุงูู ุงูุชุณุฑูุน (ุบุฑุจุงู ุจุงุณู)')
        axes[0, 1].grid(True, alpha=0.3)
        axes[0, 1].axhline(y=1, color='r', linestyle='--', alpha=0.5, label='ูุง ุชุณุฑูุน')
        axes[0, 1].legend()
        
        # ุฑุณู ุนุฏุฏ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ
        axes[1, 0].plot(ranges, results['basil_counts'], 'b-o', label='ุบุฑุจุงู ุจุงุณู', linewidth=2)
        axes[1, 0].plot(ranges, results['traditional_counts'], 'r-s', label='ุบุฑุจุงู ุฅุฑุงุชูุณุชููุณ', linewidth=2)
        axes[1, 0].set_xlabel('ุงููุทุงู ุงูุฃูุตู')
        axes[1, 0].set_ylabel('ุนุฏุฏ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ')
        axes[1, 0].set_title('ุนุฏุฏ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงูููุชุดูุฉ')
        axes[1, 0].legend()
        axes[1, 0].grid(True, alpha=0.3)
        
        # ุฑุณู ุงูููุงุกุฉ ุงููุณุจูุฉ
        efficiency = [b/t if t > 0 else 0 for b, t in zip(results['basil_times'], results['traditional_times'])]
        axes[1, 1].plot(ranges, efficiency, 'purple', linewidth=2, marker='D', markersize=6)
        axes[1, 1].set_xlabel('ุงููุทุงู ุงูุฃูุตู')
        axes[1, 1].set_ylabel('ุงูููุงุกุฉ ุงููุณุจูุฉ')
        axes[1, 1].set_title('ุงูููุงุกุฉ ุงููุณุจูุฉ (ุฃูู = ุฃูุถู)')
        axes[1, 1].grid(True, alpha=0.3)
        axes[1, 1].axhline(y=1, color='r', linestyle='--', alpha=0.5, label='ููุงุกุฉ ูุชุณุงููุฉ')
        axes[1, 1].legend()
        
        plt.tight_layout()
        plt.savefig('basil_sieve_efficiency.png', dpi=300, bbox_inches='tight')
        print("โ ุชู ุญูุธ ุฑุณู ุงูููุงุกุฉ: basil_sieve_efficiency.png")
        
        return fig

def test_basil_sieve():
    """
    ุงุฎุชุจุงุฑ ุดุงูู ูุบุฑุจุงู ุจุงุณู ุงููุจุชูุฑ
    """
    print("๐ ุงุฎุชุจุงุฑ ุดุงูู ูุบุฑุจุงู ุจุงุณู ุงููุจุชูุฑ")
    print("=" * 70)
    
    # ุงุฎุชุจุงุฑ ุฃุณุงุณู
    print("\n๐ ุงูุงุฎุชุจุงุฑ ุงูุฃุณุงุณู:")
    sieve = BasilInnovativeSieve(100)
    primes = sieve.generate_primes()
    print(f"โ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุญุชู 100: {primes[:20]}...")
    
    # ููุงุฑูุฉ ูุน ุงูุทุฑููุฉ ุงูุชูููุฏูุฉ
    print("\n๐ ููุงุฑูุฉ ูุน ุงูุทุฑููุฉ ุงูุชูููุฏูุฉ:")
    comparison = sieve.compare_with_traditional_sieve()
    
    # ุฑุณู ุงููุตูููุฉ
    print("\n๐ ุฑุณู ูุตูููุฉ ุงูุบุฑุจุงู:")
    sieve.visualize_sieve_matrix(20)
    
    # ุชุญููู ุงูููุงุกุฉ
    print("\n๐ ุชุญููู ุงูููุงุกุฉ ุนูู ูุทุงูุงุช ูุฎุชููุฉ:")
    test_ranges = [100, 500, 1000, 5000, 10000]
    efficiency_results = sieve.analyze_efficiency(test_ranges)
    sieve.plot_efficiency_analysis(efficiency_results)
    
    # ููุฎุต ุงููุชุงุฆุฌ
    print("\n๐ ููุฎุต ุงููุชุงุฆุฌ:")
    print("=" * 40)
    avg_speedup = sum(efficiency_results['speedups']) / len(efficiency_results['speedups'])
    print(f"๐ ูุชูุณุท ุงูุชุณุฑูุน: {avg_speedup:.2f}x")
    print(f"๐ ุฃูุถู ุชุณุฑูุน: {max(efficiency_results['speedups']):.2f}x")
    print(f"๐ ุฏูุฉ ุงูุฎูุงุฑุฒููุฉ: {comparison['accuracy']:.2f}%")
    
    return {
        'primes': primes,
        'comparison': comparison,
        'efficiency': efficiency_results
    }

if __name__ == "__main__":
    results = test_basil_sieve()

