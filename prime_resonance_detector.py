#!/usr/bin/env python3
"""
ูุงุดู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ูู ุงูุฑููู - ููุฌ ูุจุชูุฑ
Prime Resonance Detector - Innovative Approach

ุชุฑููุฒ ุฎุงุต ุนูู ุงูุชุดุงู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ูู ุฎูุงู:
1. ุชุญููู ุฃุฏู ูุชุฑุฏุฏุงุช ุงูุฑููู
2. ุฑุจุท ูุจุงุดุฑ ุจูู ุงูุฑููู ูุงูุฃูููุฉ
3. ุงุณุชุฎุฏุงู ุฎุตุงุฆุต ููุฒูุงุฆูุฉ ูููุฒุฉ ููุฃุนุฏุงุฏ ุงูุฃูููุฉ

ุงููุคูู: ุจุงุณู ูุญูู ุนุจุฏุงููู "ุงููุจุชูุฑ ุงูุนููู"
ุงููุดุฑู: ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุงููุณ
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks, savgol_filter
from scipy.optimize import minimize_scalar
import cmath
from typing import List, Tuple, Dict, Any
import warnings
warnings.filterwarnings('ignore')

class PrimeResonanceDetector:
    """
    ูุงุดู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ูู ุงูุฑููู
    """
    
    def __init__(self, max_prime_check: int = 100):
        """ุชููุฆุฉ ุงููุงุดู"""
        self.max_prime_check = max_prime_check
        
        # ูุนุงููุงุช ูุญุณูุฉ ูููุดู
        self.sigma_critical = 0.5  # ุงูุฎุท ุงูุญุฑุฌ
        self.resonance_amplification = 2.0  # ุชุถุฎูู ุงูุฑููู ููุฃุนุฏุงุฏ ุงูุฃูููุฉ
        self.damping_composite = 0.8  # ุชุฎููุฏ ุงูุฃุนุฏุงุฏ ุงููุฑูุจุฉ
        
        # ูุงุนุฏุฉ ุจูุงูุงุช ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ
        self.known_primes = self._generate_primes(max_prime_check)
        self.prime_frequencies = {}
        
        print(f"๐ฌ ุชู ุชููุฆุฉ ูุงุดู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ูู ุงูุฑููู")
        print(f"๐ ูุทุงู ุงููุญุต: ุญุชู {max_prime_check}")
        print(f"๐ฏ ุฃุนุฏุงุฏ ุฃูููุฉ ูุนุฑููุฉ: {len(self.known_primes)}")
        
        self._calculate_prime_frequencies()
    
    def _generate_primes(self, limit: int) -> List[int]:
        """ุชูููุฏ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุญุชู ุงูุญุฏ ุงููุญุฏุฏ"""
        primes = []
        for n in range(2, limit + 1):
            if self._is_prime(n):
                primes.append(n)
        return primes
    
    def _is_prime(self, n: int) -> bool:
        """ูุญุต ุงูุฃูููุฉ"""
        if n < 2:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        
        for i in range(3, int(np.sqrt(n)) + 1, 2):
            if n % i == 0:
                return False
        
        return True
    
    def _calculate_prime_frequencies(self):
        """ุญุณุงุจ ุชุฑุฏุฏุงุช ุงูุฑููู ุงููุชููุนุฉ ููุฃุนุฏุงุฏ ุงูุฃูููุฉ"""
        print("โก ุญุณุงุจ ุชุฑุฏุฏุงุช ุงูุฑููู ููุฃุนุฏุงุฏ ุงูุฃูููุฉ...")
        
        for p in self.known_primes:
            # ุงูุชุฑุฏุฏ ุงูุฃุณุงุณู: ln(p)
            base_frequency = np.log(p)
            
            # ุชุฑุฏุฏุงุช ุงูุฑููู ุงููุชุนุฏุฏุฉ (ูุงุฑููููู)
            harmonics = [base_frequency * h for h in [1, 2, 3, 0.5]]
            
            self.prime_frequencies[p] = {
                'base': base_frequency,
                'harmonics': harmonics,
                'resonance_strength': np.sqrt(p),  # ููุฉ ุงูุฑููู
                'quality_factor': 10.0 + p * 0.1  # ุนุงูู ุงูุฌูุฏุฉ
            }
        
        print(f"โ ุชู ุญุณุงุจ ุชุฑุฏุฏุงุช {len(self.prime_frequencies)} ุนุฏุฏ ุฃููู")
    
    def calculate_prime_response(self, t: float) -> Tuple[float, List[int]]:
        """ุญุณุงุจ ุงุณุชุฌุงุจุฉ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุนูุฏ ุงูุชุฑุฏุฏ t"""
        
        total_response = 0.0
        contributing_primes = []
        
        for p, freq_data in self.prime_frequencies.items():
            # ุญุณุงุจ ุงูุงุณุชุฌุงุจุฉ ููู ูุงุฑููููู
            prime_response = 0.0
            
            for harmonic_freq in freq_data['harmonics']:
                # ุงููุณุงูุฉ ูู ุงูุชุฑุฏุฏ ุงููุทููุจ
                frequency_distance = abs(t - harmonic_freq)
                
                # ุนุฑุถ ุงูุฑููู (ุฃุถูู ููุฃุนุฏุงุฏ ุงูุฃูููุฉ)
                resonance_width = 0.1 + 0.01 * np.log(p)
                
                # ุฏุงูุฉ ุงูุฑููู (ููุฑูุชุฒูุฉ)
                if frequency_distance < resonance_width * 5:  # ูุทุงู ุงูุชุฃุซูุฑ
                    resonance = freq_data['resonance_strength'] / (1 + (frequency_distance / resonance_width)**2)
                    prime_response += resonance
            
            # ุฅุถุงูุฉ ููุงุณุชุฌุงุจุฉ ุงูุฅุฌูุงููุฉ
            if prime_response > 0.1:  # ุนุชุจุฉ ุงููุณุงููุฉ
                total_response += prime_response
                contributing_primes.append(p)
        
        return total_response, contributing_primes
    
    def calculate_composite_response(self, t: float, max_composite: int = 100) -> float:
        """ุญุณุงุจ ุงุณุชุฌุงุจุฉ ุงูุฃุนุฏุงุฏ ุงููุฑูุจุฉ (ููููุงุฑูุฉ)"""
        
        total_response = 0.0
        
        for n in range(4, max_composite + 1):
            if not self._is_prime(n):
                # ุงูุชุฑุฏุฏ ููุนุฏุฏ ุงููุฑูุจ
                base_frequency = np.log(n)
                frequency_distance = abs(t - base_frequency)
                
                # ุนุฑุถ ุฑููู ุฃูุณุน ูุฃุถุนู ููุฃุนุฏุงุฏ ุงููุฑูุจุฉ
                resonance_width = 0.3 + 0.05 * np.log(n)
                resonance_strength = np.sqrt(n) * self.damping_composite
                
                if frequency_distance < resonance_width * 3:
                    resonance = resonance_strength / (1 + (frequency_distance / resonance_width)**2)
                    total_response += resonance
        
        return total_response
    
    def scan_frequency_spectrum(self, t_min: float = 0.5, t_max: float = 10, 
                              resolution: int = 5000) -> Dict[str, Any]:
        """ูุณุญ ุทูู ุงูุชุฑุฏุฏุงุช ููุจุญุซ ุนู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ"""
        
        print(f"๐ ูุณุญ ุทูู ุงูุชุฑุฏุฏุงุช ูู [{t_min}, {t_max}]...")
        
        t_values = np.linspace(t_min, t_max, resolution)
        prime_responses = []
        composite_responses = []
        contributing_primes_list = []
        
        for t in t_values:
            prime_resp, contrib_primes = self.calculate_prime_response(t)
            composite_resp = self.calculate_composite_response(t)
            
            prime_responses.append(prime_resp)
            composite_responses.append(composite_resp)
            contributing_primes_list.append(contrib_primes)
        
        # ุชุทุจูู ูุฑุดุญ ููุชูุนูู
        if len(prime_responses) > 50:
            window_length = min(51, len(prime_responses) // 10)
            if window_length % 2 == 0:
                window_length += 1
            
            prime_responses_smooth = savgol_filter(prime_responses, window_length, 3)
            composite_responses_smooth = savgol_filter(composite_responses, window_length, 3)
        else:
            prime_responses_smooth = prime_responses
            composite_responses_smooth = composite_responses
        
        return {
            't_values': t_values,
            'prime_responses': prime_responses,
            'composite_responses': composite_responses,
            'prime_responses_smooth': prime_responses_smooth,
            'composite_responses_smooth': composite_responses_smooth,
            'contributing_primes': contributing_primes_list
        }
    
    def detect_prime_peaks(self, spectrum_data: Dict[str, Any]) -> List[Tuple[float, float, List[int]]]:
        """ูุดู ุฐุฑูุงุช ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ"""
        
        print("๐ฏ ูุดู ุฐุฑูุงุช ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ...")
        
        t_values = spectrum_data['t_values']
        prime_responses = spectrum_data['prime_responses_smooth']
        contributing_primes = spectrum_data['contributing_primes']
        
        # ูุดู ุงูุฐุฑูุงุช
        peaks, properties = find_peaks(prime_responses, 
                                     height=np.mean(prime_responses) + np.std(prime_responses),
                                     distance=20,
                                     prominence=0.5,
                                     width=2)
        
        detected_peaks = []
        
        for peak_idx in peaks:
            t_peak = t_values[peak_idx]
            response = prime_responses[peak_idx]
            primes_at_peak = contributing_primes[peak_idx]
            
            detected_peaks.append((t_peak, response, primes_at_peak))
            
            if primes_at_peak:
                print(f"๐ฏ ุฐุฑูุฉ ููุชุดูุฉ: t = {t_peak:.4f}, ุงุณุชุฌุงุจุฉ = {response:.4f}, ุฃุนุฏุงุฏ ุฃูููุฉ: {primes_at_peak}")
        
        print(f"๐ ุฅุฌูุงูู ุงูุฐุฑูุงุช ุงูููุชุดูุฉ: {len(detected_peaks)}")
        return detected_peaks
    
    def extract_primes_from_peaks(self, detected_peaks: List[Tuple[float, float, List[int]]]) -> List[int]:
        """ุงุณุชุฎุฑุงุฌ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ูู ุงูุฐุฑูุงุช ุงูููุชุดูุฉ"""
        
        print("๐ ุงุณุชุฎุฑุงุฌ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ูู ุงูุฐุฑูุงุช...")
        
        extracted_primes = set()
        
        for t_peak, response, primes_at_peak in detected_peaks:
            for p in primes_at_peak:
                # ุงูุชุญูู ูู ูุฑุจ ุงูุชุฑุฏุฏ ูู ุงูุชุฑุฏุฏ ุงููุชููุน ููุนุฏุฏ ุงูุฃููู
                expected_freq = np.log(p)
                frequency_error = abs(t_peak - expected_freq)
                
                # ูุจูู ุงูุนุฏุฏ ุงูุฃููู ุฅุฐุง ูุงู ุงูุชุฑุฏุฏ ูุฑูุจ ุจูุง ููู ุงูููุงูุฉ
                if frequency_error < 0.5:  # ุชุณุงูุญ ูู ุงูุชุฑุฏุฏ
                    extracted_primes.add(p)
                    print(f"โ ุนุฏุฏ ุฃููู ููุชุดู: {p} (ุชุฑุฏุฏ ูุชููุน: {expected_freq:.4f}, ููุชุดู: {t_peak:.4f})")
        
        extracted_primes_list = sorted(list(extracted_primes))
        print(f"๐ ุฅุฌูุงูู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงููุณุชุฎุฑุฌุฉ: {len(extracted_primes_list)}")
        print(f"๐ฏ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ: {extracted_primes_list}")
        
        return extracted_primes_list
    
    def plot_resonance_spectrum(self, spectrum_data: Dict[str, Any], 
                               detected_peaks: List[Tuple[float, float, List[int]]]):
        """ุฑุณู ุทูู ุงูุฑููู"""
        
        print("๐ ุฑุณู ุทูู ุงูุฑููู...")
        
        t_values = spectrum_data['t_values']
        prime_responses = spectrum_data['prime_responses_smooth']
        composite_responses = spectrum_data['composite_responses_smooth']
        
        plt.figure(figsize=(15, 10))
        
        # ุงูุฑุณู ุงูุฃุณุงุณู
        plt.subplot(2, 1, 1)
        plt.plot(t_values, prime_responses, 'b-', linewidth=2, label='ุงุณุชุฌุงุจุฉ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ', alpha=0.8)
        plt.plot(t_values, composite_responses, 'r-', linewidth=1, label='ุงุณุชุฌุงุจุฉ ุงูุฃุนุฏุงุฏ ุงููุฑูุจุฉ', alpha=0.6)
        
        # ุชูููุฒ ุงูุฐุฑูุงุช ุงูููุชุดูุฉ
        if detected_peaks:
            peak_t = [p[0] for p in detected_peaks]
            peak_response = [p[1] for p in detected_peaks]
            plt.scatter(peak_t, peak_response, color='green', s=100, alpha=0.8, 
                       label='ุฐุฑูุงุช ููุชุดูุฉ', zorder=5)
        
        # ุชูููุฒ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุงููุนุฑููุฉ
        known_t = [np.log(p) for p in self.known_primes if np.log(p) >= min(t_values) and np.log(p) <= max(t_values)]
        if known_t:
            for t_known in known_t:
                plt.axvline(x=t_known, color='orange', alpha=0.3, linestyle='--')
            plt.axvline(x=known_t[0], color='orange', alpha=0.3, linestyle='--', label='ุฃุนุฏุงุฏ ุฃูููุฉ ูุนุฑููุฉ')
        
        plt.xlabel('ุงูุชุฑุฏุฏ t')
        plt.ylabel('ููุฉ ุงูุงุณุชุฌุงุจุฉ')
        plt.title('ุทูู ุงูุฑููู ููุฃุนุฏุงุฏ ุงูุฃูููุฉ - ูุงุดู ุงูุฑููู ุงููุจุชูุฑ')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # ุฑุณู ุงููุณุจุฉ (ุฃูููุฉ/ูุฑูุจุฉ)
        plt.subplot(2, 1, 2)
        ratio = np.array(prime_responses) / (np.array(composite_responses) + 0.1)  # ุชุฌูุจ ุงููุณูุฉ ุนูู ุตูุฑ
        plt.plot(t_values, ratio, 'purple', linewidth=2, label='ูุณุจุฉ ุงูุฃูููุฉ/ุงููุฑูุจุฉ')
        
        # ุชูููุฒ ุงููุณุจ ุงูุนุงููุฉ
        high_ratio_threshold = np.mean(ratio) + 2 * np.std(ratio)
        high_ratio_indices = np.where(ratio > high_ratio_threshold)[0]
        if len(high_ratio_indices) > 0:
            plt.scatter(t_values[high_ratio_indices], ratio[high_ratio_indices], 
                       color='red', s=50, alpha=0.7, label='ูุณุจ ุนุงููุฉ')
        
        plt.xlabel('ุงูุชุฑุฏุฏ t')
        plt.ylabel('ูุณุจุฉ ุงูุงุณุชุฌุงุจุฉ')
        plt.title('ูุณุจุฉ ุงุณุชุฌุงุจุฉ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ุฅูู ุงููุฑูุจุฉ')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig('/home/ubuntu/prime_resonance_spectrum.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        print("๐พ ุชู ุญูุธ ุทูู ุงูุฑููู ูู: /home/ubuntu/prime_resonance_spectrum.png")
    
    def comprehensive_prime_detection(self) -> Dict[str, Any]:
        """ูุดู ุดุงูู ููุฃุนุฏุงุฏ ุงูุฃูููุฉ"""
        
        print("๐ ุจุฏุก ุงููุดู ุงูุดุงูู ููุฃุนุฏุงุฏ ุงูุฃูููุฉ")
        print("=" * 80)
        
        results = {}
        
        # 1. ูุณุญ ุทูู ุงูุชุฑุฏุฏุงุช
        print("\n1๏ธโฃ ูุณุญ ุทูู ุงูุชุฑุฏุฏุงุช:")
        spectrum_data = self.scan_frequency_spectrum(0.5, 8, 4000)
        results['spectrum_data'] = spectrum_data
        
        # 2. ูุดู ุฐุฑูุงุช ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ
        print("\n2๏ธโฃ ูุดู ุฐุฑูุงุช ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ:")
        detected_peaks = self.detect_prime_peaks(spectrum_data)
        results['detected_peaks'] = detected_peaks
        
        # 3. ุงุณุชุฎุฑุงุฌ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ
        print("\n3๏ธโฃ ุงุณุชุฎุฑุงุฌ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ:")
        extracted_primes = self.extract_primes_from_peaks(detected_peaks)
        results['extracted_primes'] = extracted_primes
        
        # 4. ุชูููู ุงูุฃุฏุงุก
        print("\n4๏ธโฃ ุชูููู ุงูุฃุฏุงุก:")
        performance = self._evaluate_detection_performance(extracted_primes)
        results['performance'] = performance
        
        print(f"  ๐ฏ ุฃุนุฏุงุฏ ุฃูููุฉ ููุชุดูุฉ: {len(extracted_primes)}")
        print(f"  ๐ฏ ุฏูุฉ ุงููุดู: {performance['precision']:.1%}")
        print(f"  ๐ฏ ูุนุฏู ุงูุงุณุชุฏุนุงุก: {performance['recall']:.1%}")
        print(f"  ๐ฏ ุงููุชูุฌุฉ F1: {performance['f1_score']:.1%}")
        
        # 5. ุฑุณู ุงูุทูู
        print("\n5๏ธโฃ ุฑุณู ุทูู ุงูุฑููู:")
        self.plot_resonance_spectrum(spectrum_data, detected_peaks)
        
        return results
    
    def _evaluate_detection_performance(self, extracted_primes: List[int]) -> Dict[str, float]:
        """ุชูููู ุฃุฏุงุก ุงููุดู"""
        
        # ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ูู ุงููุทุงู ุงูููุญูุต
        target_primes = [p for p in self.known_primes if p <= 20]  # ูุทุงู ุงููุญุต
        
        if not extracted_primes:
            return {
                'precision': 0.0,
                'recall': 0.0,
                'f1_score': 0.0,
                'true_positives': 0,
                'false_positives': 0,
                'false_negatives': len(target_primes)
            }
        
        # ุญุณุงุจ ุงูููุงููุณ
        true_positives = len(set(extracted_primes) & set(target_primes))
        false_positives = len(set(extracted_primes) - set(target_primes))
        false_negatives = len(set(target_primes) - set(extracted_primes))
        
        precision = true_positives / len(extracted_primes) if extracted_primes else 0.0
        recall = true_positives / len(target_primes) if target_primes else 0.0
        f1_score = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0.0
        
        return {
            'precision': precision,
            'recall': recall,
            'f1_score': f1_score,
            'true_positives': true_positives,
            'false_positives': false_positives,
            'false_negatives': false_negatives,
            'target_primes': target_primes,
            'extracted_primes': extracted_primes
        }

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print("๐ ูุฑุญุจุงู ุจู ูู ูุงุดู ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ ูู ุงูุฑููู!")
    print("=" * 80)
    
    # ุฅูุดุงุก ุงููุงุดู
    detector = PrimeResonanceDetector(max_prime_check=50)
    
    # ุชุดุบูู ุงููุดู ุงูุดุงูู
    results = detector.comprehensive_prime_detection()
    
    # ุญูุธ ุงููุชุงุฆุฌ
    import json
    with open('/home/ubuntu/prime_resonance_results.json', 'w', encoding='utf-8') as f:
        serializable_results = {
            'extracted_primes': results['extracted_primes'],
            'performance': results['performance'],
            'peaks_count': len(results['detected_peaks'])
        }
        json.dump(serializable_results, f, indent=2, ensure_ascii=False)
    
    print("\n๐พ ุชู ุญูุธ ูุชุงุฆุฌ ุงููุดู ูู: /home/ubuntu/prime_resonance_results.json")
    
    return results

if __name__ == "__main__":
    results = main()

